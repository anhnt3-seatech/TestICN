pipeline {
    agent any
    
    tools {
        ant 'ApacheAnt'   // Cáº¥u hÃ¬nh tool Ant trong Jenkins
    }

    environment {
        NAMESPACE = "cp4ba-dev"          // namespace CP4BA
        ICN_LABEL = "app=icp4adeploy-navigator-deploy"                  // label Ä‘á»ƒ tÃ¬m pod ICN
        PLUGIN_PATH = "/opt/ibm/plugins"
        PLUGIN_CLASS = "com.vn.test.TestABCPlugin"  // class plugin chÃ­nh
        ICN_URL = "https://cpd-cp4ba-dev.apps.cp4ba.linuxtechi.lan/icn/navigator/"
        PATH = "C:\\temp\\ocp;${env.PATH}"
        TOKEN_URL = 'https://cp-console-cp4ba-dev.apps.cp4ba.linuxtechi.lan/idprovider/v1/auth/identitytoken'
        CLIENT_ID = '' //'rm9egkx2wa7px4ngudn36z06omfsy91d'
        USERNAME  = 'cp4badmin'
        PASSWORD  = 'Abc@123'
        ACCESS_TOKEN = ''
        SECURITY_TOKEN = ''
        JSON_ICN=''
        JAR_PLUGIN='TestABC.jar'
        PATH_PLUGIN='/opt/ibm/plugins/'
        URL_ICN_LOGON='https://navigator-cp4ba-dev.apps.cp4ba.linuxtechi.lan/navigator/jaxrs/logon';
        URL_ICN_LOAD_PLUGIN='https://navigator-cp4ba-dev.apps.cp4ba.linuxtechi.lan/navigator/jaxrs/admin/loadPlugin'
        URL_ICN_SAVE_PLUGIN='http://navigator-cp4ba-dev.apps.cp4ba.linuxtechi.lan/navigator/jaxrs/admin/configuration'
        URL_OCP_LOGIN='https://api.cp4ba.linuxtechi.lan:6443'
        OCP_USER='anhnt'
        OCP_PASS='anhnt@123'
    }

    stages {
    	
        stage('Checkout') {
            steps {
                git 'https://github.com/anhnt3-seatech/TestICN.git'
            }
        }

        stage('Build Plugin') {
            steps {
                sh 'ant clean compile dist'
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: 'dist/*.jar', fingerprint: true
            }
        }
        
        stage('Copy Plugin to ICN Pod') {
            steps {
                script {
                    bat """
                    	@echo off
                    	echo yyyPATH_PLUGIN= %PATH_PLUGIN%%JAR_PLUGIN%
                        echo ">>> Login to OpenShift"
                        rem oc login --token=sha256~TUPzm2sbJNW53KTFzNsBRWlSKZxxVLSJiFvLqsCe6os --server=https://api.cp4ba.linuxtechi.lan:6443 --insecure-skip-tls-verify=true
                        oc login %URL_OCP_LOGIN% --username=%OCP_USER% --password=%OCP_PASS% --insecure-skip-tls-verify=true
                        echo ">>> Switch namespace"
                        oc project %NAMESPACE%

                        echo ">>> Get ICN pod name"
                        for /f "delims=" %%i in ('oc get pod -n cp4ba-dev -l app^=icp4adeploy-navigator-deploy -o jsonpath^="{.items[0].metadata.name}"') do set ICN_POD=%%i
                        echo Found ICN pod: %ICN_POD%
                        if "%ICN_POD%"=="" (
                            echo "ERROR: KhÃ´ng tÃ¬m tháº¥y ICN pod!"
                            exit /b 1
                        )

                        echo ">>> Copy plugin JAR to ICN pod"
                        oc cp dist\\%JAR_PLUGIN% %NAMESPACE%/%ICN_POD%:%PLUGIN_PATH%/

                    """
                }
            }
        }
        stage('Load Plugin for ICN') {
            steps {
                bat '''
                	@echo off
                	echo PATH_PLUGINxxx=%PATH_PLUGIN%%JAR_PLUGIN%
                	
                	echo get CLIENT_ID
                	rem --- Láº¥y secret name cÃ³ chá»©a 'oidcclient-secret' ---
					for /f "usebackq delims=" %%a in (`oc get secret -n cp4ba-dev --no-headers ^| findstr "oidcclient-secret"`) do (
					    for /f "tokens=1" %%b in ("%%a") do (
					        set SECRET_NAME=%%b
					    )
					)				
					rem --- Láº¥y CLIENT_ID (base64) tá»« secret ---
					for /f "usebackq delims=" %%c in (`oc get secret %SECRET_NAME% -n cp4ba-dev -o jsonpath^="{.data.CLIENT_ID}"`) do (
					    set RAW_CLIENT_ID=%%c
					)
					
					rem --- Giáº£i mÃ£ base64 sang UTF-8 báº±ng PowerShell ---
					for /f "usebackq delims=" %%d in (`powershell -NoProfile -Command "[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('%RAW_CLIENT_ID%'))"`) do (
					    set CLIENT_ID=%%d
					)				
                    echo Calling API to get access token...

                    rem --- Gá»�i API vÃ  lÆ°u káº¿t quáº£ ra file táº¡m ---
                    curl -k -X POST "%TOKEN_URL%" ^
                      -H "Content-Type: application/x-www-form-urlencoded" ^
                      -d "grant_type=password&client_id=%CLIENT_ID%&username=%USERNAME%&password=%PASSWORD%&scope=openid" ^
                      -o response.json
					
					
                    rem --- Parse access_token tá»« JSON báº±ng PowerShell ---
                    for /f "delims=" %%a in ('powershell -NoProfile -Command "(Get-Content response.json | ConvertFrom-Json).access_token"') do (
                        set ACCESS_TOKEN=%%a
                    )

                    rem --- Ghi token vÃ o file Ä‘á»ƒ stage sau cÃ³ thá»ƒ Ä‘á»�c ---
                    echo %ACCESS_TOKEN% > token.txt
                    
                  	
                    curl -k -c cookies.txt ^
                      -H "Authorization: Bearer %ACCESS_TOKEN%" ^
                      "%URL_ICN_LOGON%?desktop=admin&forceBasic=true" ^
                      -H "Content-Type: application/x-www-form-urlencoded" ^
                      -d "userid=%USERNAME%&password=%PASSWORD%" ^
                      -o icnresponse.json

					for /f "usebackq delims=" %%a in (`
					    powershell -NoProfile -Command ^
					    "$raw = Get-Content 'icnresponse.json' -Raw; " ^
					    "$json = $raw.Substring($raw.IndexOf('{', 2)); " ^
					    "Write-Output ((ConvertFrom-Json $json).security_token)"
					`) do (
					    set SECURITY_TOKEN=%%a
					)
					
					
                    curl -k -b cookies.txt ^
                      -H "security_token: %SECURITY_TOKEN%" ^
                      -X POST "%URL_ICN_LOAD_PLUGIN%?desktop=admin&fileName=%PATH_PLUGIN%%JAR_PLUGIN%&plugin=TestABCPlugin&enable=true" ^
                      -o icnload.json
                      
					for /f "usebackq delims=" %%a in (`
					    powershell -NoProfile -Command ^
					    "$raw = Get-Content 'icnload.json' -Raw; " ^
					    "$json = $raw.Substring($raw.IndexOf('{', 2)); " ^
					    "$json | Add-Member -NotePropertyName 'filename' -NotePropertyValue '%PATH_PLUGIN%%JAR_PLUGIN%'; " ^
					    "Write-Output $json"
					`) do (
					    set JSON_ICN=%%a
					)              
 					echo === Save ICN Plugin ===
                    curl -k -b cookies.txt ^
                      -H "security_token: %SECURITY_TOKEN%" ^
                      -X POST "%URL_ICN_SAVE_PLUGIN%?desktop=admin&action=update&id=TestABCPlugin&configuration=PluginConfig" ^
                      -d 'json_post=%JSON_ICN%'
                '''
            }
        }
    }

    post {
        success {
            echo "âœ… ICN Plugin build & deploy thÃ nh cÃ´ng!"
        }
        failure {
            echo "â�Œ Pipeline tháº¥t báº¡i!"
        }
        always {
            echo "Cleaning temporary files..."
            bat 'if exist response.json del response.json'
            bat 'if exist token.txt del token.txt'
            bat 'if exist icn_response.json del icn_response.json'
            bat 'if exist security_token.txt del security_token.txt'
            bat 'if exist icn_response.json del icnload.json'
            bat 'if exist icnload.json del icnload.json'
            bat 'if exist icnjson.json del icnjson.json'
            bat 'if exist icnresponse.json del icnresponse.json'
        }
    }
}