pipeline {
    agent any
    
    tools {
        ant 'ApacheAnt'   // Cáº¥u hÃ¬nh tool Ant trong Jenkins
    }

    environment {
        NAMESPACE = "cp4ba-dev"          // namespace CP4BA
        ICN_LABEL = "app=icp4adeploy-navigator-deploy"                  // label Ä‘á»ƒ tÃ¬m pod ICN
        PLUGIN_PATH = "/opt/ibm/plugins"
        PLUGIN_CLASS = "com.vn.test.TestABCPlugin"  // class plugin chÃ­nh
        ICN_URL = "https://cpd-cp4ba-dev.apps.cp4ba.linuxtechi.lan/icn/navigator/"
        PATH = "C:\\temp\\ocp;${env.PATH}"
        TOKEN_URL = 'https://cp-console-cp4ba-dev.apps.cp4ba.linuxtechi.lan/idprovider/v1/auth/identitytoken'
        CLIENT_ID = '' //'rm9egkx2wa7px4ngudn36z06omfsy91d'
        USERNAME  = 'cp4badmin'
        PASSWORD  = 'Abc@123'
        ACCESS_TOKEN = ''
        SECURITY_TOKEN = ''
        JSON_ICN=''
        JAR_PLUGIN='TestABC.jar'
        PATH_PLUGIN='/opt/ibm/plugins/'
        URL_ICN_LOGON='https://navigator-cp4ba-dev.apps.cp4ba.linuxtechi.lan/navigator/jaxrs/logon';
        URL_ICN_LOAD_PLUGIN='https://navigator-cp4ba-dev.apps.cp4ba.linuxtechi.lan/navigator/jaxrs/admin/loadPlugin'
        URL_ICN_SAVE_PLUGIN='http://navigator-cp4ba-dev.apps.cp4ba.linuxtechi.lan/navigator/jaxrs/admin/configuration'
        URL_OCP_LOGIN='https://api.cp4ba.linuxtechi.lan:6443'
        OCP_USER='anhnt'
        OCP_PASS='anhnt@123'
    }

    stages {
    	
        stage('Checkout') {
            steps {
                git 'https://github.com/anhnt3-seatech/TestICN.git'
            }
        }

        stage('Build Plugin') {
            steps {
                sh 'ant clean compile dist'
            }
        }
        
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: 'dist/*.jar', fingerprint: true
            }
        }
        
        stage('Copy Plugin to ICN Pod') {
            steps {
                script {
                    sh '''
                    	set +x
		                echo ">>> PATH_PLUGIN = ${PATH_PLUGIN}${JAR_PLUGIN}"
		                echo ">>> Login to OpenShift"
		                # oc login --token=sha256~TUPzm2sbJNW53KTFzNsBRWlSKZxxVLSJiFvLqsCe6os --server=https://api.cp4ba.linuxtechi.lan:6443 --insecure-skip-tls-verify=true
		                oc login ${URL_OCP_LOGIN} --username=${OCP_USER} --password=${OCP_PASS} --insecure-skip-tls-verify=true
		
		                echo ">>> Switch namespace"
		                oc project ${NAMESPACE}
		
		                echo ">>> Get ICN pod name"
		                ICN_POD=$(oc get pod -n ${NAMESPACE} -l app=icp4adeploy-navigator-deploy -o jsonpath="{.items[0].metadata.name}")
		                echo "Found ICN pod: ${ICN_POD}"
		
		                if [ -z "$ICN_POD" ]; then
		                    echo "ERROR: Không tìm thấy ICN pod!"
		                    exit 1
		                fi
		
		                echo ">>> Copy plugin JAR to ICN pod"
		                oc cp dist/${JAR_PLUGIN} ${NAMESPACE}/${ICN_POD}:${PLUGIN_PATH}/
		                set -x
		            '''
                }
            }
        }
        stage('Load Plugin for ICN') {
            steps {
                sh '''
                	set +x
			        echo "=== Starting ICN plugin deployment ==="
			
			        echo "PATH_PLUGINxxx=${PATH_PLUGIN}${JAR_PLUGIN}"
			
			        echo "=== Get CLIENT_ID from OpenShift secret ==="
			
			        # Lấy tên secret chứa "oidcclient-secret"
			        SECRET_NAME=$(oc get secret -n cp4ba-dev --no-headers | grep "oidcclient-secret" | awk "{print \\$1}")
			
			        # Lấy CLIENT_ID (base64)
			        RAW_CLIENT_ID=$(oc get secret "$SECRET_NAME" -n cp4ba-dev -o jsonpath="{.data.CLIENT_ID}")
			
			        # Giải mã base64 sang UTF-8
			        CLIENT_ID=$(echo "$RAW_CLIENT_ID" | base64 --decode)
			
			        echo "CLIENT_ID=$CLIENT_ID"
			
			        echo "=== Calling API to get access token ==="
			
			        # Gọi API lấy token và lưu kết quả vào file JSON
			        curl -k -X POST "$TOKEN_URL" \
			          -H "Content-Type: application/x-www-form-urlencoded" \
			          -d "grant_type=password&client_id=${CLIENT_ID}&username=${USERNAME}&password=${PASSWORD}&scope=openid" \
			          -o response.json
			
			        # Parse access_token từ JSON bằng jq
			        ACCESS_TOKEN=$(jq -r ".access_token" response.json)
			        echo "$ACCESS_TOKEN" > token.txt
			
			        echo "=== Get ICN security token ==="
			
			        curl -k -c cookies.txt \
			          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
			          "${URL_ICN_LOGON}?desktop=admin&forceBasic=true" \
			          -H "Content-Type: application/x-www-form-urlencoded" \
			          -d "userid=${USERNAME}&password=${PASSWORD}" \
			          -o icnresponse.json

					
					SECURITY_TOKEN=$(sed 's/^{}&&//' icnresponse.json | jq -r .security_token)
					echo "Security Token = ${SECURITY_TOKEN}"
			        echo "=== Load ICN Plugin ==="
			
			        curl -k -b cookies.txt \
			          -H "security_token: ${SECURITY_TOKEN}" \
			          -X POST "${URL_ICN_LOAD_PLUGIN}?desktop=admin&fileName=${PATH_PLUGIN}${JAR_PLUGIN}&plugin=TestABCPlugin&enable=true" \
			          -o icnload.json
			
			        # Bổ sung trường filename vào JSON (dùng jq)
					JSON_ICN=$(sed 's/^{}&&//' icnload.json| jq --arg fn "${PATH_PLUGIN}${JAR_PLUGIN}" '. + {filename: $fn}')
			
			        echo "=== Save ICN Plugin ==="
			        curl -k -b cookies.txt \
			          -H "security_token: ${SECURITY_TOKEN}" \
			          -X POST "${URL_ICN_SAVE_PLUGIN}?desktop=admin&action=update&id=TestABCPlugin&configuration=PluginConfig" \
			          -d "json_post=${JSON_ICN}"
			
			        echo "=== Done ==="
			        set -x
			    '''
            }
        }
    }

    post {
	    success {
	        echo "✅ ICN Plugin build & deploy thành công!"
	    }
	    failure {
	        echo "❌ Pipeline thất bại!"
	    }
	    always {
	        echo "Cleaning temporary files..."
	        sh '''
	            rm -f response.json token.txt icn_response.json \
	                  security_token.txt icnload.json icnjson.json icnresponse.json
	        '''
	    }
	}
}